김연아
gimyeona2388
온라인

ktoongjin — 24. 11. 25. 오후 2:15
package com.kh.subjectMVCProject.controller;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
확장
StudentDAO.java
6KB
ktoongjin — 24. 11. 26. 오전 10:31
-- 자바 프로젝트 사용자계정 생성하기
ALTER SESSION SET "_ORACLE_SCRIPT"=true;
DROP USER subjectdb CASCADE; -- 기존 사용자 삭제
CREATE USER subjectdb IDENTIFIED BY 123456 -- 사용자 이름: Model, 비밀번호 : 1234
    DEFAULT TABLESPACE USERS    -- 데이터 저장소
    TEMPORARY TABLESPACE TEMP;   -- 임시저장장소
확장
로컬-SUBJECTDB_1122.sql
4KB
ktoongjin — 24. 11. 26. 오후 12:50
System.out.print("K-국어  / M-수학  /  E-영어  / H-역사  / P-\r\n"
                + "프로그래밍 / D-데이터베이스 / ED-교육학이론\r\n"
                + "");
ktoongjin — 24. 11. 26. 오후 2:10
System.out.print("과목요약()O-운영 ,A-어셈블,C-컴파일,J-자료,P-프로밍,D-디비 S-소프공학>>");
ktoongjin — 24. 11. 26. 오후 2:30
public void updateManager() {
        LessonDAO ldao = new LessonDAO();
        LessonVO lvo = new LessonVO();
        //수정하기 전체출력요청
        ArrayList<LessonVO> lessonList = ldao.lessonSelect(lvo); 
        if(lessonList.size() != 0) {
            printLessonList(lessonList); 
        }else {
            System.out.println("출력할 데이터가 없습니다.");
            return; 
        }
        //화면으로부터 입력받는다.
        System.out.print("수정할 번호선택>>");
        int no = Integer.parseInt(sc.nextLine());

        System.out.print("수정할과목입력(O-운영 ,A-어셈블,C-컴파일,J-자료,P-프로밍,D-디비 S-소프공학)>>");
        String abbre= (sc.nextLine()).trim();

        System.out.print("수정할과목명입력(O-운영 ,A-어셈블,C-컴파일,J-자료,P-프로밍,D-디비 S-소프공학)>>");
        String name = (sc.nextLine()).trim();

        lvo = new LessonVO(no, abbre, name); 
        boolean successFlag = ldao.lessonUpdate(lvo); 

        //화면출력
        if(successFlag == true) {
            System.out.println(no+"과목을 수정 하였습니다.");
        }else {
            System.out.println(no +"과목을 수정 실패 하였습니다.");
        }
    }
ktoongjin — 24. 11. 26. 오후 3:04
private static void lessonMenu() {
        int no;
        LessonRegisterManager lrm = new LessonRegisterManager();

        MenuViewer.lessonMenuView();
        no = Integer.parseInt(sc.nextLine());
        switch (no) {
        case LESSON_CHOICE.LIST:
            System.out.println("");
            lrm.selectManager();
            break;
        case LESSON_CHOICE.INSERT:
            System.out.println("");
            lrm.insertManager();
            break;
        case LESSON_CHOICE.UPDATE:
            System.out.println("");
            lrm.updateManager();
            break;
        case LESSON_CHOICE.DELETE:
            System.out.println("");
            lrm.deleteManager();
            break;
        case LESSON_CHOICE.SORT:
            System.out.println("");
            lrm.selectSortManager();
            break;
        case LESSON_CHOICE.MAIN:
            return;
        default:
            System.out.println("해당 메뉴 번호만 입력하세요.");
        }

    }
sdsd
public Scanner sc = new Scanner(System.in); 
//과목등록(insert)
public void insertManager() {
LessonDAO ldao = new LessonDAO(); 
//화면으로부터 입력받는다. 
System.out.print("과목요약입력(O-운영 ,A-어셈블,C-컴파일,J-자료,P-프로밍,D-디비 S-소프공학)>>");
확장
message.txt
4KB
public final String LESSON_SELECT = "select * from lesson"; 
public final String LESSON_SELECT_SORT = "select * from lesson ORDER BY NAME"; 
public final String LESSON_DELETE = "DELETE FROM LESSON WHERE NO = ? ";
public final String LESSON_UPDATE = "UPDATE LESSON SET ABBRE = ?, NAME = ? WHERE NO = ? ";
public final String LESSON_INSERT = "INSERT INTO LESSON VALUES(lesson_seq.NEXTVAL, ?, ?) ";
확장
message.txt
5KB
권민성 — 24. 11. 26. 오후 3:18
package com.kh.subjectMVCProject.controller;

import java.io.FileReader;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
확장
message.txt
3KB
나종호 — 24. 11. 26. 오후 3:33
public boolean lessonDelete(lessonVO lvo) {
        Connection con = null; // 오라클에 DB접속
        PreparedStatement pstmt = null; // 오라클에서 작업할 쿼리문을 사용할 수 있게하는 명령문
        boolean successFlag = false;
        try {
            con = DBUtility.dbCon();
            pstmt = con.prepareStatement(LESSON_DELETE);
            pstmt.setInt(1, lvo.getNo());
            int count = pstmt.executeUpdate();
            successFlag = (count !=0)?true:false;
        } catch (SQLException e) {
            System.out.println(e.toString());
        } finally {
            DBUtility.dbClose(con, pstmt);
        }

        return successFlag;

    }
ktoongjin — 24. 11. 27. 오전 9:20
-- trainee 수강신청
drop table trainee;
create table trainee( 
    no number ,                     --pk seq
    s_num varchar2(8) not null,     --student.num(fk) 학생번호
    abbre varchar2(2) not null,     --lesson.abbre(fk) 과목요약
    section varchar2(20) not null,  --전공,부전공,교양
    regdate date default sysdate      --수강신청일
);
Alter table trainee add constraint trainee_no_pk primary key(no);
Alter table trainee add constraint trainee_student_num_fk 
    FOREIGN key(s_num) References student(num) on delete set null;
Alter table trainee add constraint trainee_lesson_abbre_fk 
    FOREIGN key(abbre) References lesson(abbre) on delete set null;
public class TraineeVO {
    private int no;         //--pk seq
    private String s_num;    //--student.num(fk) 학생번호
    private String abbre;     //--lesson.abbre(fk) 과목요약
    private String section; //--전공,부전공,교양
    private Date regdate;     //--수강신청일

    public TraineeVO() {}
    public TraineeVO(int no, String s_num, String abbre, String section, Date regdate) {
        super();
        this.no = no;
        this.s_num = s_num;
        this.abbre = abbre;
        this.section = section;
        this.regdate = regdate;
    }
    public int getNo() {
        return no;
    }
    public void setNo(int no) {
        this.no = no;
    }
    public String getS_num() {
        return s_num;
    }
    public void setS_num(String s_num) {
        this.s_num = s_num;
    }
    public String getAbbre() {
        return abbre;
    }
    public void setAbbre(String abbre) {
        this.abbre = abbre;
    }
    public String getSection() {
        return section;
    }
    public void setSection(String section) {
        this.section = section;
    }
    public Date getRegdate() {
        return regdate;
    }
    public void setRegdate(Date regdate) {
        this.regdate = regdate;
    }
    @Override
    public String toString() {
        return "TraineeVO [no=" + no + ", s_num=" + s_num + ", abbre=" + abbre + ", section=" + section + ", regdate="
                + regdate + "]";
    }
}
김연아 — 24. 11. 27. 오전 10:57
싸이버거
박찬희 — 24. 11. 27. 오전 10:57
박찬희 싸이버거
박소현 — 24. 11. 27. 오전 10:57
딥치즈버거 부탁드립니다!
신하윤 — 24. 11. 27. 오전 10:57
텍사스바베큐치킨버거로 부탁드려요!
문정배 — 24. 11. 27. 오전 10:57
딥치즈버거  로 하겠습니다
김민석 — 24. 11. 27. 오전 10:58
싸이버거로 부탁드립니다
전지연 — 24. 11. 27. 오전 10:58
딥치즈버거 부탁드립니다
나종호 — 24. 11. 27. 오전 10:58
햄버거 투표
언빌리버블 버거
6%
인크레더버거
13%
딥치즈버거
38%
싸이버거
이 응답에 투표했어요
31%
텍사스바베큐치킨버거
6%
불불불싸이버거
0%
골드맥앤치즈버거
0%
골든맥앤치즈비프버거
0%
싸이플랙스버거
6%
투표 종료됨
오승택 — 24. 11. 27. 오전 11:16
// traineeSelect
    public ArrayList<TraineeVO> traineeSelect(TraineeVO tvo) {
        Connection con = null; // 오라클 DB 접속하는 관문
        PreparedStatement pstmt = null; // 오라클에서 작업할 쿼리문을 사용할수있게 해주는 명령문
        ResultSet rs = null; // 오라클에서 결과물을 받는객체
        ArrayList<TraineeVO> traineeList = new ArrayList<TraineeVO>(); // 결과값을 다른객체에 전달하기 위해서 사용하는 객체

        try {
            con = DBUtility.dbCon();
            pstmt = con.prepareStatement(TRAINEE_SELECT);
            rs = pstmt.executeQuery();
            while (rs.next()) {
                int no = rs.getInt("NO");
                String s_num = rs.getString("S_NUM");
                String abbre = rs.getString("ABBRE");
                String section = rs.getString("SECTION");
                Date regdate = rs.getDate("REGDATE");
                TraineeVO traineeVO = new TraineeVO(no, s_num, abbre, section, regdate);
                traineeList.add(traineeVO);
            }
        } catch (SQLException e) {
            System.out.println(e.toString());
        } finally {
            DBUtility.dbClose(con, pstmt, rs);
        }

        return traineeList;
    }
ktoongjin — 24. 11. 27. 오후 12:35
package com.kh.subjectMVCProject.controller;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Scanner;
확장
TraineeRegisterManager.java
5KB
package com.kh.subjectMVCProject.controller;

import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
확장
StudentRegisterManager.java
7KB
ktoongjin — 24. 11. 27. 오후 3:09
https://github.com/ChaeHyunWoo/SpringBoot-Project-MEGABOX
GitHub
GitHub - ChaeHyunWoo/SpringBoot-Project-MEGABOX: 스프링 부트 + JSP 파싱_영화...
스프링 부트 + JSP 파싱_영화 예매 사이트. Contribute to ChaeHyunWoo/SpringBoot-Project-MEGABOX development by creating an account on GitHub.
GitHub - ChaeHyunWoo/SpringBoot-Project-MEGABOX: 스프링 부트 + JSP 파싱_영화...
ktoongjin — 24. 11. 28. 오전 9:02
첨부 파일 형식: acrobat
33.공공 데이터-(OpenAPI 사용)240513.pdf
768.08 KB
민석아 공공데이터 자료다.
김민석 — 24. 11. 28. 오전 9:03
넵 자료34번까지는 있습니다
ktoongjin — 24. 11. 28. 오전 9:07
그래 알았다.
김민석 — 24. 11. 28. 오전 9:31
넵
ktoongjin — 24. 11. 28. 오전 10:14
public static void main(String[] args) {
        //1. url 주소를 적는다.
        StringBuilder urlBuilder = null;

        try {
            urlBuilder = new StringBuilder("https://apis.data.go.kr/1613000/BusSttnInfoInqireService/getSttnNoList");
            urlBuilder.append("?"+URLEncoder.encode("serviceKey","UTF-8")+
              "=여기에다 서비스키값을 넣으면 된다.");
            urlBuilder.append("&"+URLEncoder.encode("pageNo","UTF-8")+"="+URLEncoder.encode("1","UTF-8"));
            urlBuilder.append("&"+URLEncoder.encode("numOfRows","UTF-8")+"="+URLEncoder.encode("10","UTF-8"));
            urlBuilder.append("&"+URLEncoder.encode("_type","UTF-8")+"="+URLEncoder.encode("xml","UTF-8"));
            urlBuilder.append("&"+URLEncoder.encode("cityCode","UTF-8")+"="+URLEncoder.encode("25","UTF-8"));
            urlBuilder.append("&"+URLEncoder.encode("nodeNm","UTF-8")+"="+URLEncoder.encode("전통시장","UTF-8"));
            urlBuilder.append("&"+URLEncoder.encode("nodeNo","UTF-8")+"="+URLEncoder.encode("44810","UTF-8"));

        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        } 
    }//end of main
ktoongjin — 24. 11. 28. 오전 10:28
conn.setRequestProperty("Content-type", "application/json");
ktoongjin — 24. 11. 28. 오전 10:46
private Document parseXML(InputStream stream) {
        DocumentBuilderFactory objDocumentBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder objDocumentBuilder = null;
        Document doc = null;
        try {
            objDocumentBuilder = objDocumentBuilderFactory.newDocumentBuilder();
            doc = objDocumentBuilder.parse(stream);
        } catch (ParserConfigurationException e) {
            e.printStackTrace();
        } catch (SAXException e) { // Simple API for XML e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return doc;
    }
ktoongjin — 24. 11. 28. 오전 11:14
package publicDataTest;

public class PublicDataAPITest {

public static void main(String[] args) {
// TODO Auto-generated method stub
확장
PublicDataAPITest.java
1KB
package publicDataTest.model;

public class LandPrice {

}
LandPrice.java
1KB
ktoongjin — 24. 11. 28. 오전 11:55
package publicDataTest;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
확장
PublicDataAPITest.java
6KB
ktoongjin — 24. 11. 28. 오후 2:55
package publicDataTest.controller;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
확장
LandPriceDAO.java
5KB
package publicDataTest.controller;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Scanner;
import publicDataTest.PublicDataAPITest;
확장
LandPriceRegisterManager.java
4KB
public static void main(String[] args) {
        int no;
        boolean exitFlag = false; 
        while (!exitFlag) {
            try {
                MenuViewer.mainMenuView();
                no = Integer.parseInt(sc.nextLine()); 
                switch (no) {
                case MENU_CHOICE.SUBJECT:
                    subjectMenu();
                    break;
                case MENU_CHOICE.STUDENT:
                    studentMenu();
                    break;
                case MENU_CHOICE.LESSON:
                    lessonMenu();
                    break;
                case MENU_CHOICE.TRAINEE:
                    traineeMenu();
                    break;
                case MENU_CHOICE.EXIT:
                    System.out.println("프로그램을 종료합니다.");
                    exitFlag = true; 
                    break; 
                default:
                    System.out.println("해당 메뉴 번호만 입력하세요.");
                }
            } catch (Exception e) {
                System.out.println("\n입력에 오류가 있습니다.\n프로그램을 다시 시작하세요.");
            }
        }//end of file
    }
ktoongjin — 24. 11. 29. 오전 9:19
건강보험심사평가원_전국 병의원 및 약국 현황
ktoongjin — 어제 오전 11:55
public static String convert(String word, int size) {
    String formatter = String.format("%%%ds", size -getKorCnt(word));
    return String.format(formatter, word);
}
private static int getKorCnt(String kor) {
    int cnt = 0;
    for (int i = 0 ; i < kor.length() ; i++) {
        if (kor.charAt(i) >= '가' && kor.charAt(i) <= '힣') {
            cnt++;
        }
    } return cnt;
}
전지연 — 어제 오후 12:05
public static int getPrintfStrLength(int formatSize, String str) {
        return formatSize - (getByteLength(str) - str.length());
    }

    public static int getByteLength(String str) {
        int length=0;

        if (str!=null) {
            try {
                length = str.getBytes("euc-kr").length;
            } catch (UnsupportedEncodingException e) {
                e.printStackTrace();
            }
        }

        return length;
    }
ktoongjin — 어제 오후 12:06
public static int getPrintfStrLength(int formatSize, String str) {
        return formatSize - (getByteLength(str) - str.length());
    }

    public static int getByteLength(String str) {
        int length=0;

        if (str!=null) {
            try {
                length = str.getBytes("euc-kr").length;
            } catch (UnsupportedEncodingException e) {
                e.printStackTrace();
            }
        }

        return length;
    }
int len1 = getPrintfStrLength(24, books[i]);
            int len2 = getPrintfStrLength(14, authors[i]);

            String formatStr = "|%-"+len1+"s|%"+len2+"s|\n";
            System.out.printf(formatStr, books[i], authors[i]);
        }
ktoongjin — 어제 오후 12:22
System.out.println(String.format("%s%s%s%s%s%s%s"
                            , Test.convert("학번", 8)
                            , Test.convert("이름", 10)
                            , Test.convert("국어", 5)
                            , Test.convert("영어", 5)
                            , Test.convert("수학", 5)
                            , Test.convert("총점", 5)
                            , Test.convert("평균", 9)));
private static int getKorCnt(String kor) {
        int cnt = 0;
        for (int i = 0 ; i < kor.length() ; i++) {
            if (kor.charAt(i) >= '가' && kor.charAt(i) <= '힣') {
                cnt++;
            }
        } return cnt;
    }

    // 전각문자의 개수만큼 문자열 길이를 빼주는 메서드
    public static String convert(String word, int size) {
        String formatter = String.format("%%%ds", size -getKorCnt(word));
        return String.format(formatter, word);
    }
김동욱 — 어제 오후 12:43
# Java-Project-Flight-Reservation
자바 + Oracle SQL 비행기 예약 관리 프로그램


## 🖥️ 프로젝트 소개
비행기 예약,비행편,항송사,고객을 관리하는 프로그램입니다
확장
4팀 리드미.txt
2KB
박찬희 — 어제 오후 3:09
public String toString() {

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy/mm/dd");
        String rd = sdf.format(releaseDate);
        return String.format("%-10d%-20s%-10d%-15s%-30s"
                , movieId
                , rd
                , duration
                , genre
        , title);
    }
ktoongjin — 오늘 오후 12:29
Date date = new Date();
        out.println("<html>");
        out.println("<body>");
        out.println("<h1>My First Servlet Program !</h1>");
        out.println("<br>");
        out.println(date.toString());
        out.println("</body>");
        out.println("</html>");
김민석 — 오늘 오후 12:50
super.service(request, response);
ktoongjin — 오늘 오후 2:19
CREATE SEQUENCE visit_seq  -- 시퀀스이름
   START WITH 1             -- 시작을 1로 설정
   INCREMENT BY 1          -- 증가 값을 1씩 증가
   NOMAXVALUE             -- 최대 값이 무한대
   NOCACHE
   NOCYCLE;

CREATE table "VISIT" (
    "NO"         NUMBER(5,0) NOT NULL,
    "WRITER"     VARCHAR2(20) NOT NULL,
    "MEMO"     VARCHAR2(4000) NOT NULL,
    "REGDATE"   DATE NOT NULL,
    constraint "VISIT_PK" primary key ("NO")
);
https://www.oracle.com/kr/database/technologies/appdev/jdbc-downloads.html
ktoongjin — 오늘 오후 2:36
<html>
  <head>
    <title>방명록 작성하기</title>
  </head>
  <body>
    <form method="post" action="VisitInsert">
      <table align="center" width="500" border="1">
        <tr>
            <th width="70">작성자</th>
        <td width="430">
          &nbsp;<input type="text" name="writer" size="50">
        </td>
        </tr>
        <tr>
        <th>내용</th>
        <td>
          &nbsp;<textarea rows="7" cols="50" name="memo">
                 </textarea>
         </td>
        </tr>
        <tr>
         <td colspan="2" align="center">
           <input type="submit" value="저장">&nbsp;&nbsp;
           <input type="reset" value="취소">
         </td>
         </tr>
    </table>
    </form>
  </body>
</html>
ktoongjin — 오늘 오후 2:48
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
ktoongjin — 오늘 오후 3:11
Connection con = null;
        // db.properties 에서 id, pw 가져오기
        String filePath = "D:\javaStudy\studentMVCProject\src\db.properties";
        Properties pt = new Properties(); 
        try {
            pt.load(new FileReader(filePath));
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        String id = pt.getProperty("id");
        String pw = pt.getProperty("pw");
        String url = pt.getProperty("url");

        // 1. jdbc driver load 2. connection
        try {
            Class.forName("oracle.jdbc.driver.OracleDriver");
            con = DriverManager.getConnection(url, id, pw);
        } catch (ClassNotFoundException e) {
            System.out.println(e.toString());
        } catch (SQLException e) {
            System.out.println(e.toString());
        }
jdbc:oracle:thin:@127.0.0.1:1521/xe
public final String LESSON_INSERT = "INSERT INTO LESSON VALUES(lesson_seq.NEXTVAL, ?, ?) ";
PreparedStatement pstmt = null;     //오라클에서 작업할 쿼리문 사용할게 하는 명령문
        boolean successFlag = false; 

        try {
            con = DBUtility.dbCon(); 
            pstmt = con.prepareStatement(LESSON_INSERT);
            pstmt.setString(1, lvo.getAbbre());
            pstmt.setString(2, lvo.getName()); 

            int count = pstmt.executeUpdate();
            successFlag = (count != 0)?(true):(false); 
        } catch (SQLException e) {
            System.out.println(e.toString());
        } finally {
            DBUtility.dbClose(con, pstmt);
        }
ktoongjin — 오늘 오후 3:20
if (con != null) {
            try {
                con.close();

            } catch (SQLException e) {
                System.out.println(e.toString());
            }
        }
        if (stmt != null) {
            try {
                stmt.close();

            } catch (SQLException e) {
                System.out.println(e.toString());
            }
        }
protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        //1.1 전송된 값을 utf-8 셋팅하기
        request.setCharacterEncoding("UTF-8");
        //1.1 정보가져오기
        String writer = request.getParameter("writer"); 
        String memo = request.getParameter("memo");

        //2. visit 테이블에 저장한다(프로토콜: 약속)
        Connection con = null;
        PreparedStatement pstmt = null;     //오라클에서 작업할 쿼리문 사용할게 하는 명령문
        boolean successFlag = false; 
        String url = "jdbc:oracle:thin:@127.0.0.1:1521/xe";
        String VISIT_INSERT = "INSERT INTO VISIT VALUES(VISIT_seq.NEXTVAL, ?, ?, SYSDATE)";
        try {
            Class.forName("oracle.jdbc.driver.OracleDriver");
            con = DriverManager.getConnection(url, "webuser", "123456");
            pstmt = con.prepareStatement(VISIT_INSERT);
            pstmt.setString(1, writer);
            pstmt.setString(2, memo); 
            int count = pstmt.executeUpdate();
            successFlag = (count != 0)?(true):(false); 

        } catch (ClassNotFoundException e) {
            System.out.println(e.toString());
        } catch (SQLException e) {
            System.out.println(e.toString());
        } finally {
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException e) {
                    System.out.println(e.toString());
                }
            }
            if (pstmt != null) {
                try {
                    pstmt.close();
                } catch (SQLException e) {
                    System.out.println(e.toString());
                }
            }
        }

        //3. 화면
        if(successFlag == true) {
            System.out.println("입력성공");
//            response.sendRedirect("visitList");

        }else {
            System.out.println("입력실패");

        }
    }
ktoongjin — 오늘 오후 3:55
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" id="WebApp_ID" version="2.5">
  <display-name>jspStudy</display-name>
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.jsp</welcome-file>
    <welcome-file>default.htm</welcome-file>
  </welcome-file-list>
  <servlet>
    <servlet-name>visitInsert</servlet-name>
    <servlet-class>co.kh.dev.bbs.VisitInsert</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>visitInsert</servlet-name>
    <url-pattern>/visitInsert</url-pattern>
  </servlet-mapping>
</web-app>
ktoongjin — 오늘 오후 4:11
response.setContentType("text/html;charset=UTF-8");
        PrintWriter out = response.getWriter();
        try {
            out.println("<html>");
            out.println("<head><title>방명록 리스트</title></head>");
            out.println("<body>");
            StringBuffer sql = new StringBuffer();
            sql.append("select no, writer, memo, regdate ");
            sql.append("from visit ");
            sql.append("order by no desc ");
            Connection con = null;
            PreparedStatement pstmt = null;
            ResultSet rs = null;
try{
                Class.forName("oracle.jdbc.driver.OracleDriver");
                con = DriverManager.getConnection(
                "jdbc:oracle:thin:@localhost:1521:xe","hr", "hr");
                pstmt = con.prepareStatement(sql.toString());
                rs = pstmt.executeQuery();
                while(rs.next()){
                    int no = rs.getInt("no");
                    String writer = rs.getString("writer");
                    String memo = rs.getString("memo");
                    java.sql.Date regdate = rs.getDate("regdate");
                    out.println(
                        "<table align=center width=500 border=1>");
                    out.println("<tr>");
                    out.println("<th width=50>번호</th>");
                    out.println(
                        "<td width=50 align=center>"+ no +"</td>");
                    out.println("<th width=70>작성자</th>");
                    out.println(
                       "<td width=180 align=center>"+ writer +"</td>");
                    out.println("<th width=50>날짜</th>");
                    out.println(
                       "<td width=100 align=center>"+ regdate+"</td>");
                    out.println("</tr>");
                    out.println("<tr>");
                    out.println("<th width=50>내용</th>");
                    out.println("<td colspan=5>&nbsp;  
                                   <textarea rows=3 cols=50>" +
                                    memo + "</textarea></td>");
                    out.println("</tr>");
                    out.println("</table>");
                    out.println("<p>");
                }
            }catch(SQLException e){
                e.printStackTrace();
            }catch(ClassNotFoundException e){
                e.printStackTrace();
            }finally{
                try{if(pstmt != null)pstmt.close();}catch(SQLException e){}
                try{if(con != null)con.close();}catch(SQLException e){}
            }
            out.println("<p align=center>
                   <a href=/jspStudy/bbs/write.html>글쓰기</a></p>");
            out.println("</body>");
            out.println("</html>");
        } finally { 
            out.close();
        }
접기
message.txt
3KB
ktoongjin — 오늘 오후 4:22
protected void doGet(HttpServletRequest request, HttpServletResponse response)
throws ServletException, IOException {
// 1. 사용자 데이터 가져오기

// 2. 테이블 curd
Connection con = null;
확장
message.txt
3KB
﻿
protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		// 1. 사용자 데이터 가져오기

		// 2. 테이블 curd
		Connection con = null;
		String VISIT_INSERT = "select * from visit order by no desc";
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
			con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", "webuser", "123456");
			pstmt = con.prepareStatement(VISIT_INSERT);
			rs = pstmt.executeQuery();

			// 3. 출력하기
			response.setContentType("text/html;charset=UTF-8");
			PrintWriter out = response.getWriter();

			out.println("<html>");
			out.println("<head><title>방명록 리스트</title></head>");
			out.println("<body>");
			while (rs.next()) {
				int no = rs.getInt("no");
				String writer = rs.getString("writer");
				String memo = rs.getString("memo");
				java.sql.Date regdate = rs.getDate("regdate");
				out.println("<table align=center width=500 border=1>");
				out.println("<tr>");
				out.println("<th width=50>번호</th>");
				out.println("<td width=50 align=center>" + no + "</td>");
				out.println("<th width=70>작성자</th>");
				out.println("<td width=180 align=center>" + writer + "</td>");
				out.println("<th width=50>날짜</th>");
				out.println("<td width=100 align=center>" + regdate + "</td>");
				out.println("</tr>");
				out.println("<tr>");
				out.println("<th width=50>내용</th>");
				out.println("<td colspan=5>&nbsp;<textarea rows=3 cols=50>" + memo + "</textarea></td>");
				out.println("</tr>");
				out.println("</table>");
				out.println("<p>");
			}
			out.println("<p align=center><a href=/jspStudy/bbs/write.html>글쓰기</a></p>");
			out.println("</body>");
			out.println("</html>");
		} catch (ClassNotFoundException e) {
			System.out.println(e.toString());
		} catch (SQLException e) {
			System.out.println(e.toString());
		} finally {
			if (con != null) {
				try {
					con.close();
				} catch (SQLException e) {
					System.out.println(e.toString());
				}
			}
			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException e) {
					System.out.println(e.toString());
				}
			}
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {
					System.out.println(e.toString());
				}
			}
		}

	}
